syntax = "proto3";
package raftcmdpb;

import "github.com/deepfabric/beehive/pb/metapb/metapb.proto";
import "github.com/deepfabric/beehive/pb/errorpb/errorpb.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_enum_prefix_all) = false;

// ChangePeerType add or remove node
enum ChangePeerType {
    AddNode    = 0;
    RemoveNode = 1;
}

enum CMDType {
    Invalid   = 0;
    RaftError = 1;
    Snap      = 2;
    Write     = 3;
    Read      = 4;
}

enum AdminCmdType {
    InvalidAdmin   = 0;
    ChangePeer     = 1;
    Split          = 2;
    CompactRaftLog = 3;
    TransferLeader = 4;
    ComputeHash    = 5;
    VerifyHash     = 6;
}

// RaftRequestHeader raft request header, it contains the shard's metadata
message RaftRequestHeader {
    bytes             id         = 1 [(gogoproto.customname) = "ID"];
    uint64            shardID    = 2;
    metapb.Peer       peer       = 3 [(gogoproto.nullable) = false]; 
    metapb.ShardEpoch shardEpoch = 5 [(gogoproto.nullable) = false];
    uint64            term       = 6;
}

message RaftResponseHeader {
    bytes         id          = 1 [(gogoproto.customname) = "ID"];
    errorpb.Error error       = 2 [(gogoproto.nullable) = false];
    uint64        currentTerm = 3;
}

// RaftCMDRequest we can't include both normal requests and administrator request 
// at same time. 
message RaftCMDRequest {
    RaftRequestHeader header       = 1;
    repeated Request  requests     = 2 [(gogoproto.nullable) = true];
    AdminRequest      adminRequest = 3 [(gogoproto.nullable) = true];
}

message RaftCMDResponse {
    RaftResponseHeader header        = 1 [(gogoproto.nullable) = true];
    repeated Response  responses     = 2 [(gogoproto.nullable) = true];
    AdminResponse      adminResponse = 3 [(gogoproto.nullable) = true];
}

// AdminRequest admin request
message AdminRequest {
    AdminCmdType          cmdType    = 1;
    ChangePeerRequest     changePeer = 2;
    SplitRequest          split      = 3;
    TransferLeaderRequest transfer   = 4;
    CompactRaftLogRequest compact    = 5;
}

// AdminResponse admin response
message AdminResponse {
    AdminCmdType           type       = 1;
    ChangePeerResponse     changePeer = 2;
    SplitResponse          split      = 3;
    TransferLeaderResponse transfer   = 4;
    CompactRaftLogResponse compact    = 5;
}

// ChangePeerRequest change peer request
message ChangePeerRequest {
    ChangePeerType       changeType = 1;
    metapb.Peer          peer       = 2 [(gogoproto.nullable) = false];
}

// ChangePeerResponse change peer response
message ChangePeerResponse {
    metapb.Shard shard = 1 [(gogoproto.nullable) = false];
}

// SplitRequest split shard request
message SplitRequest {
    // This can be only called in internal RaftStore now.
    // The splitKey must be in the been splitting shard.
    bytes           splitKey    = 1;
    // We split the shard into two, first uses the shard 
    // parent shard id, and the second uses the new_shard_id.
    // We must guarantee that the new_shard_id is global unique.
    uint64          newShardID  = 2;
    // The peer ids for the new split shard.
    repeated uint64 newPeerIDs  = 3;
    // If true, right shard derive the origin shard_id, 
    // left shard use new_shard_id.
    bool            rightDerive = 4;
}

// SplitResponse split shard response
message SplitResponse {
    metapb.Shard left  = 1 [(gogoproto.nullable) = false];
    metapb.Shard right = 2 [(gogoproto.nullable) = false];
}

// TransferLeaderRequest transfer leader request
message TransferLeaderRequest {
    metapb.Peer peer =	1 [(gogoproto.nullable) = false];
}

// TransferLeaderResponse transfer leader response
message TransferLeaderResponse {
}

// CompactRaftLogRequest compact raft log request
message CompactRaftLogRequest {
    uint64 compactIndex = 1;
    uint64 compactTerm  = 2;
}

// CompactRaftLogResponse compact raft log response
message CompactRaftLogResponse {
    
}

// Request request
message Request {
    bytes   id            = 1 [(gogoproto.customname) = "ID"];
    uint64  group         = 2;
    CMDType type          = 3;
    uint64  custemType    = 4;
    bytes   key           = 5;
    bytes   cmd           = 6;
    int64   sid           = 7 [(gogoproto.customname) = "SID"];
    int64   pid           = 8 [(gogoproto.customname) = "PID"];
    int64   stopAt        = 9;
    uint64  toShard       = 10;
    bool    allowFollower = 11;
    bool    lastBroadcast = 12;
}

// Response response
message Response {
    bytes         id                = 1 [(gogoproto.customname) = "ID"];
    CMDType       type              = 2;
    bytes         value             = 3;
    Request       originRequest     = 4 [(gogoproto.nullable) = true];
    int64         sid               = 5 [(gogoproto.customname) = "SID"];
    int64         pid               = 6 [(gogoproto.customname) = "PID"];
    errorpb.Error error             = 7 [(gogoproto.nullable) = false];
    bool          continueBroadcast = 8;
    bool          stale             = 9;
}